<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Binary Analysis on soffensive blog</title><link>https://soffensive.github.io/tags/binary-analysis/</link><description>Recent content in Binary Analysis on soffensive blog</description><generator>Hugo</generator><language>en</language><lastBuildDate>Wed, 21 Feb 2018 04:27:00 -0800</lastBuildDate><atom:link href="https://soffensive.github.io/tags/binary-analysis/index.xml" rel="self" type="application/rss+xml"/><item><title>Using angr and symbolic execution for reverse engineering challenges (RPI MBE Labs)</title><link>https://soffensive.github.io/posts/ctf/2018-02-21-using-angr-and-symbolic-execution-for-reverse-engineering-challenges-rpi-mbe-labs/</link><pubDate>Wed, 21 Feb 2018 04:27:00 -0800</pubDate><guid>https://soffensive.github.io/posts/ctf/2018-02-21-using-angr-and-symbolic-execution-for-reverse-engineering-challenges-rpi-mbe-labs/</guid><description>&lt;p>This blog posts will highlight how you can utilize the angr dynamic binary analysis framework and symbolic execution for reverse engineering tasks.&lt;/p>
&lt;p>More precisely, we will look at the first two tasks in the &lt;code>lab1&lt;/code> of the &lt;a href="https://github.com/RPISEC/MBE/tree/master/src/lab01" target="_blank" rel="noopener noreffer ">RPISEC MBE labs&lt;/a>.&lt;/p>
&lt;p>While angr&amp;rsquo;s internals are quite complex and require substantial effort for mastering, getting started for our simple examples requires not too much knowledge.  &lt;/p>
&lt;h2 id="lab1c">lab1C&lt;/h2>
&lt;p>The first example we will look at is &lt;code>lab1C&lt;/code> from &lt;code>lab01&lt;/code>, which requires the user to enter a certain password:&lt;/p></description></item></channel></rss>