<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Symbolic Execution - Tag - soffensive blog</title><link>https://soffensive.github.io/tags/symbolic-execution/</link><description>Symbolic Execution - Tag - soffensive blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 21 Feb 2018 04:27:00 -0800</lastBuildDate><atom:link href="https://soffensive.github.io/tags/symbolic-execution/" rel="self" type="application/rss+xml"/><item><title>Using angr and symbolic execution for reverse engineering challenges (RPI MBE Labs)</title><link>https://soffensive.github.io/posts/ctf/2018-02-21-using-angr-and-symbolic-execution-for-reverse-engineering-challenges-rpi-mbe-labs/</link><pubDate>Wed, 21 Feb 2018 04:27:00 -0800</pubDate><author>soffensive</author><guid>https://soffensive.github.io/posts/ctf/2018-02-21-using-angr-and-symbolic-execution-for-reverse-engineering-challenges-rpi-mbe-labs/</guid><description><![CDATA[<p>This blog posts will highlight how you can utilize the angr dynamic binary analysis framework and symbolic execution for reverse engineering tasks.</p>
<p>More precisely, we will look at the first two tasks in the <code>lab1</code> of the <a href="https://github.com/RPISEC/MBE/tree/master/src/lab01" target="_blank" rel="noopener noreffer ">RPISEC MBE labs</a>.</p>
<p>While angr&rsquo;s internals are quite complex and require substantial effort for mastering, getting started for our simple examples requires not too much knowledge.  </p>
<h2 id="lab1c">lab1C</h2>
<p>The first example we will look at is <code>lab1C</code> from <code>lab01</code>, which requires the user to enter a certain password:</p>]]></description></item></channel></rss>