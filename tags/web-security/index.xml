<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Web Security on soffensive blog</title><link>https://soffensive.github.io/tags/web-security/</link><description>Recent content in Web Security on soffensive blog</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 23 Apr 2018 08:04:00 -0700</lastBuildDate><atom:link href="https://soffensive.github.io/tags/web-security/index.xml" rel="self" type="application/rss+xml"/><item><title>Exploiting misconfigured CORS Null Origin</title><link>https://soffensive.github.io/posts/web-app-sec/2018-04-23-exploiting-misconfigured-cors-null-origin/</link><pubDate>Mon, 23 Apr 2018 08:04:00 -0700</pubDate><guid>https://soffensive.github.io/posts/web-app-sec/2018-04-23-exploiting-misconfigured-cors-null-origin/</guid><description>&lt;p>Almost two years ago, in October 2016, James Kettle published an excellent &lt;a href="http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html" target="_blank" rel="noopener noreffer ">blog post&lt;/a> about the various types of Cross-Origin Resource Sharing (CORS) misconfigurations and how they can be exploited.&lt;/p>
&lt;p>Recently, I encountered a web application that allowed for two-way interaction with the so-called null origin. More precisely, when sending an HTTP request specifying the header:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-http" data-lang="http">&lt;span class="line">&lt;span class="cl">&lt;span class="err">Origin: null
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>the server would respond with the following two HTTP headers:&lt;/p></description></item></channel></rss>