<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Web Security - Tag - soffensive blog</title><link>https://soffensive.github.io/tags/web-security/</link><description>Web Security - Tag - soffensive blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Mon, 23 Apr 2018 08:04:00 -0700</lastBuildDate><atom:link href="https://soffensive.github.io/tags/web-security/" rel="self" type="application/rss+xml"/><item><title>Exploiting misconfigured CORS Null Origin</title><link>https://soffensive.github.io/posts/web-app-sec/2018-04-23-exploiting-misconfigured-cors-null-origin/</link><pubDate>Mon, 23 Apr 2018 08:04:00 -0700</pubDate><author>soffensive</author><guid>https://soffensive.github.io/posts/web-app-sec/2018-04-23-exploiting-misconfigured-cors-null-origin/</guid><description><![CDATA[<p>Almost two years ago, in October 2016, James Kettle published an excellent <a href="http://blog.portswigger.net/2016/10/exploiting-cors-misconfigurations-for.html" target="_blank" rel="noopener noreffer ">blog post</a> about the various types of Cross-Origin Resource Sharing (CORS) misconfigurations and how they can be exploited.</p>
<p>Recently, I encountered a web application that allowed for two-way interaction with the so-called null origin. More precisely, when sending an HTTP request specifying the header:</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-http" data-lang="http"><span class="line"><span class="cl"><span class="err">Origin: null
</span></span></span></code></pre></td></tr></table>
</div>
</div><p>the server would respond with the following two HTTP headers:</p>]]></description></item></channel></rss>